set.seed(100)
train_ind = sample(seq_len(nrow(data)), size = smp_size)
# creating the training and testing data sets.
train = data[train_ind, ]
test = data[-train_ind, ]
#predicting the values using our models for the test data set
model3.pred = predict(model3, test)
model2.pred = predict(model2, test)
model1.pred = predict(model1, test)
glm.pred = predict(glm.fit, test)
base.pred = predict(base, test)
#calculating the MSE for each of the models' results.
model3.results = data.frame((test["actual_productivity"]-model3.pred)^2)
model2.results = data.frame((test["actual_productivity"]-model2.pred)^2)
model1.results = data.frame((test["actual_productivity"]-model1.pred)^2)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
base.results = data.frame((test["actual_productivity"]-base.pred)^2)
model3.MSE = sum(model3.results)/length(model3.results)
model3.MSE
model2.MSE = sum(model2.results)/length(model2.results)
model2.MSE
model1.MSE = sum(model1.results)/length(model1.results)
model1.MSE
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
base.MSE = sum(base.results)/length(base.results)
base.MSE
# setting the seed and creating a sampling index for 80% of the data using this seed.
set.seed(123)
train_ind = sample(seq_len(nrow(data)), size = smp_size)
# creating the training and testing data sets.
train = data[train_ind, ]
test = data[-train_ind, ]
#predicting the values using our models for the test data set
model3.pred = predict(model3, test)
model2.pred = predict(model2, test)
model1.pred = predict(model1, test)
glm.pred = predict(glm.fit, test)
base.pred = predict(base, test)
#calculating the MSE for each of the models' results.
model3.results = data.frame((test["actual_productivity"]-model3.pred)^2)
model2.results = data.frame((test["actual_productivity"]-model2.pred)^2)
model1.results = data.frame((test["actual_productivity"]-model1.pred)^2)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
base.results = data.frame((test["actual_productivity"]-base.pred)^2)
model3.MSE = sum(model3.results)/length(model3.results)
model3.MSE
model2.MSE = sum(model2.results)/length(model2.results)
model2.MSE
model1.MSE = sum(model1.results)/length(model1.results)
model1.MSE
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
base.MSE = sum(base.results)/length(base.results)
base.MSE
# modelling using glm()
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = quasibinomial)
# modelling using glm()
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = quasi)
#predicting the values using our models for the test data set
model3.pred = predict(model3, test)
model2.pred = predict(model2, test)
model1.pred = predict(model1, test)
glm.pred = predict(glm.fit, test)
base.pred = predict(base, test)
#calculating the MSE for each of the models' results.
model3.results = data.frame((test["actual_productivity"]-model3.pred)^2)
model2.results = data.frame((test["actual_productivity"]-model2.pred)^2)
model1.results = data.frame((test["actual_productivity"]-model1.pred)^2)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
base.results = data.frame((test["actual_productivity"]-base.pred)^2)
model3.MSE = sum(model3.results)/length(model3.results)
model3.MSE
model2.MSE = sum(model2.results)/length(model2.results)
model2.MSE
model1.MSE = sum(model1.results)/length(model1.results)
model1.MSE
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
base.MSE = sum(base.results)/length(base.results)
base.MSE
# modelling using glm()
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = Gamma)
#predicting the values using our models for the test data set
model3.pred = predict(model3, test)
model2.pred = predict(model2, test)
model1.pred = predict(model1, test)
glm.pred = predict(glm.fit, test)
base.pred = predict(base, test)
#calculating the MSE for each of the models' results.
model3.results = data.frame((test["actual_productivity"]-model3.pred)^2)
model2.results = data.frame((test["actual_productivity"]-model2.pred)^2)
model1.results = data.frame((test["actual_productivity"]-model1.pred)^2)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
base.results = data.frame((test["actual_productivity"]-base.pred)^2)
model3.MSE = sum(model3.results)/length(model3.results)
model3.MSE
model2.MSE = sum(model2.results)/length(model2.results)
model2.MSE
model1.MSE = sum(model1.results)/length(model1.results)
model1.MSE
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
base.MSE = sum(base.results)/length(base.results)
base.MSE
#glm fit with a gamma distribution
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = Gamma)
glm.pred = predict(glm.fit, test)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
#glm fit with a poisson distribution
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = poisson)
glm.pred = predict(glm.fit, test)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
#glm fit with a gamma distribution
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = Gamma)
glm.pred = predict(glm.fit, test)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
#glm fit with a poisson distribution
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = poisson)
glm.pred = predict(glm.fit, test)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
model2 = lm(actual_productivity ~ targeted_productivity + smv + idle_men + team + no_of_workers  + log(team) + log(no_of_workers) + log(targeted_productivity) + log(smv),train)
summary(model2)
model1 = lm(actual_productivity ~ . , train)
model1 = step(model1)
summary(model1)
model2 <- lm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv,train)
summary(model2)
summary(model3)
num_cols <- unlist(lapply(data, is.numeric))
data_num <- data[ , num_cols]
# load packages
library(tidyverse)
library(ggplot2)
library(GGally)
# read data file
data = read_csv('garments_empolyee_productivity.csv')
# changing categorical values into factors to be analysed.
data$quarter = as.factor(data$quarter)
data$department = as.factor(data$department)
data$day = as.factor(data$day)
# setting the sample size to 80% of the data.
smp_size = floor(0.8 * nrow(data))
# setting the seed and creating a sampling index for 80% of the data using this seed.
set.seed(123)
train_ind = sample(seq_len(nrow(data)), size = smp_size)
# creating the training and testing data sets.
train = data[train_ind, ]
test = data[-train_ind, ]
# str() called to see variable types
str(data)
num_cols <- unlist(lapply(data, is.numeric))
data_num <- data[ , num_cols]
# describe() called to see data qualities such as mean or frequency
summary(data)
round(cor(data_num),3)
base = lm(actual_productivity ~ . , train)
summary(base)
model1 = lm(actual_productivity ~ . , train)
model1 = step(model1)
summary(model1)
model2 = lm(actual_productivity ~ targeted_productivity + smv + idle_men + team + no_of_workers  + log(team) + log(no_of_workers) + log(targeted_productivity) + log(smv),train)
summary(model2)
model2 <- lm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv,train)
summary(model2)
par(mfcol=c(2,2))
plot(model2)
# modelling using glm()
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = gaussian)
# summary for the glm fit
summary(glm.fit)
model3 = lm(actual_productivity ~ . + .:.  + log(team) + log(no_of_workers),train)
model3 = step(model3)
summary(model3)
#predicting the values using our models for the test data set
model3.pred = predict(model3, test)
model2.pred = predict(model2, test)
model1.pred = predict(model1, test)
glm.pred = predict(glm.fit, test)
base.pred = predict(base, test)
#calculating the MSE for each of the models' results.
model3.results = data.frame((test["actual_productivity"]-model3.pred)^2)
model2.results = data.frame((test["actual_productivity"]-model2.pred)^2)
model1.results = data.frame((test["actual_productivity"]-model1.pred)^2)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
base.results = data.frame((test["actual_productivity"]-base.pred)^2)
model3.MSE = sum(model3.results)/length(model3.results)
model3.MSE
model2.MSE = sum(model2.results)/length(model2.results)
model2.MSE
model1.MSE = sum(model1.results)/length(model1.results)
model1.MSE
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
base.MSE = sum(base.results)/length(base.results)
base.MSE
#glm fit with a gamma distribution
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = Gamma)
glm.pred = predict(glm.fit, test)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
#glm fit with a poisson distribution
glm.fit = glm(actual_productivity ~ targeted_productivity + smv + idle_men  + log(team) + log(no_of_workers) + targeted_productivity:smv, train, family = poisson)
glm.pred = predict(glm.fit, test)
glm.results = data.frame((test["actual_productivity"]-glm.pred)^2)
glm.MSE = sum(glm.results)/length(glm.results)
glm.MSE
library(ggmap)
#install the osmdata, sf, tidyverse and ggmap package
if(!require("osmdata")) install.packages("osmdata")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("sf")) install.packages("sf")
if(!require("ggmap")) install.packages("ggmap")
#load packages
library(tidyverse)
library(osmdata)
library(sf)
library(ggmap)
head(available_features())
head(available_tags("amenity"))
print(available_tags("amenity"))
head(available_tags("school"))
head(available_tags("shop"))
head(available_tags("amenity"))
q <- getbb("Melbourne") %>%
opq() %>%
add_osm_feature("amenity", "college")
str(q) #query structure
cinema <- osmdata_sf(q)
cinema
college <- osmdata_sf(q)
college
q <- getbb("Madrid") %>%
opq() %>%
add_osm_feature("amenity", "college")
str(q) #query structure
college <- osmdata_sf(q)
college
#our background map
mad_map <- get_map(getbb("Madrid"), maptype = "toner-background")
#final map
ggmap(mad_map)+
geom_sf(data = college$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#004529",
alpha = .5,
size = 4,
shape = 21)+
labs(x = "", y = "")
shiny::runApp('Uni/FIT5120/Reducing Isolation/FIT5120Map')
library(shiny)
require('datasets')
require('ggplot2')
require('readr')
require('dplyr')
require('leaflet')
require('forcats')
runApp('Uni/FIT5120/Reducing Isolation/FIT5120Map')
runApp('Uni/FIT5120/Reducing Isolation/FIT5120Map')
runApp('Uni/FIT5120/Reducing Isolation/FIT5120Map')
shiny::runApp('Uni/FIT5120/Reducing Isolation/FIT5120Map')
runApp('Uni/FIT5120/Reducing Isolation/FIT5120Map')
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- addMarkers(m, lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- addMarkers(m, lng=144.9631, lat=-37.8136, popup="The birthplace of R")
m
m <- addMarkers(m, lng=144.946457, lat=-37.840935, popup="The birthplace of R")
m
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
#install the osmdata, sf, tidyverse and ggmap package
if(!require("osmdata")) install.packages("osmdata")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("sf")) install.packages("sf")
if(!require("ggmap")) install.packages("ggmap")
#load packages
library(tidyverse)
library(osmdata)
library(sf)
library(ggmap)
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
head(available_features())
head(available_tags("amenity"))
print(available_tags("amenity"))
q <- getbb("Melbourne")%>%
opq()%>%
add_osm_feature("amenity", "cinema")
str(q) #query structure
cinema <- osmdata_sf(q)
cinema
m <- leaflet(cinema)
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
map <- map %>% addCircleMarkers(
radius = 1,
opacity = 1,
fillOpacity = 1)
m <- m %>% addCircleMarkers(
radius = 1,
opacity = 1,
fillOpacity = 1)
q
View(q)
q <- getbb("Melbourne")%>%
opq()%>%
add_osm_feature("amenity", "universities")
View(q)
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
print(available_tags("amenity"))
q <- getbb("Melbourne")%>%
opq()%>%
add_osm_feature("amenity", "universities")
str(q) #query structure
cinema <- osmdata_sf(q)
cinema
m <- m %>% addCircleMarkers(
radius = 1,
opacity = 1,
fillOpacity = 1)
View(q)
q[["prefix"]]
result <- opq(bbox = 'Lisbon, Portugal') %>%
add_osm_feature(
key = 'amenity',
value = 'university'
) %>%
osmdata_sf()
View(result)
result <- opq(bbox = 'Melbourne, Australia') %>%
add_osm_feature(
key = 'amenity',
value = 'university'
) %>%
osmdata_sf()
View(result)
result$osm_polygons
result$osm_polygons$name
result$osm_polygons$geometry
View(result)
#our background map
mad_map <- get_map(getbb("Melbourne"), maptype = "toner-background")
#final map
ggmap(mad_map)+
geom_sf(data = cinema$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#004529",
alpha = .5,
size = 4,
shape = 21)+
labs(x = "", y = "")
result$osm_polygons$geometry
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
print(available_tags("amenity"))
result <- opq(bbox = 'Melbourne, Australia') %>%
add_osm_feature(
key = 'amenity',
value = 'university'
) %>%
osmdata_sf()
str(q) #query structure
cinema <- osmdata_sf(q)
cinema
m <- m %>% addCircleMarkers(
radius = 1,
opacity = 1,
fillOpacity = 1)
#final map
ggmap(mad_map)+
geom_sf(data = result$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#004529",
alpha = .5,
size = 4,
shape = 21)+
labs(x = "", y = "")
result$osm_polygons$geometry
result$osm_polygons$geometry
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
print(available_tags("amenity"))
result <- opq(bbox = 'Melbourne, Australia') %>%
add_osm_feature(
key = 'amenity',
value = 'university'
) %>%
osmdata_sf()
str(q) #query structure
cinema <- osmdata_sf(q)
cinema
m <- m %>% addPolygons()
m <- m %>% addPolygons(result$osm_polygons$geometry)
m <- m %>% addPolygons(result$osm_polygons$geometry)
result$osm_polygons$geometry
m <- m %>% addPolygons(result$osm_polygons$geometry[0])
result$osm_polygons$geometry[0]
result$osm_polygons$geometry[1]
m <- m %>% addPolygons(result$osm_polygons$geometry[1])
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
print(available_tags("amenity"))
#our background map
mad_map <- get_map(getbb("Melbourne"), maptype = "toner-background")
#final map
ggmap(mad_map)+
geom_sf(data = result$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#004529",
alpha = .5,
size = 4,
shape = 21)+
labs(x = "", y = "")
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=144.946457, lat=-37.815018, popup="The birthplace of R")
m
View(result)
# Load the libraries
library(leaflet)
library(leaflet.extras)
install.packages('leaflet.extras')
# Load the libraries
library(leaflet)
library(leaflet.extras)
library(dplyr)
# Load the data
data.location = read.csv('/path-to-file/Location Data.txt',
header = TRUE,
sep = ',')
setwd("~/Uni/FIT5120/test")
# Load the data
data.location = read.csv('/path-to-file/Location Data.txt',
header = TRUE,
sep = ',')
# Load the data
data.location = read.csv('Location Data.txt',
header = TRUE,
sep = ',')
# Create leaflet
leaflet(data.location) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(lng = ~long,
lat = ~lat,
popup = paste(paste('<b>Office:</b>',
data.location$place),
paste('<b>Address:</b>',
data.location$address),
paste('<b>Lat:</b>',
data.location$lat),
paste('<b>Long:</b>',
data.location$long),
paste('<b>Supervisor:</b>',
data.location$supervisor),
data.location$student1,
data.location$student2,
data.location$student3,
sep = '<br/>'),
label = ~place,
group = 'data.location') %>%
addResetMapButton() %>%
addSearchFeatures(
targetGroups = 'data.location',
options = searchFeaturesOptions(zoom = 15,
openPopup = TRUE,
firstTipSubmit = TRUE,
autoCollapse = TRUE,
hideMarkerOnCollapse = TRUE))%>%
addMeasure(
position = 'bottomleft',
primaryLengthUnit = 'meters',
primaryAreaUnit = 'sqmeters',
activeColor = '#3D535D',
completedColor = '#7D4479') %>%
addControl("<P><b>Masterpiece Statistics 53</b>
<br/>Search for offices/ industries<br/>in Java by name.</P>",
position = 'topright')
